# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install UV and build dependencies
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            curl.exe -LsSf https://astral.sh/uv/install.ps1 | pwsh
            echo "$USERPROFILE/.cargo/bin" >> $GITHUB_PATH
          else
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install build twine --system

      - name: Get version from pyproject.toml
        run: |
          VERSION=$(grep "^version = " pyproject.toml | cut -d'"' -f2)
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and publish Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m build
          twine upload dist/*
